#!/usr/bin/python

#################################################################################################
# Title:   Namechooser3000.py
# Description:
#  This script is made to select a random winner of the Oslo site Julekalender.
#  The random number is generated by measuring the quantum mechanical effects on photons travelling through a vacuum.
#  More detail on the physics here: qrng.anu.edu.au
#################################################################################################

import sys
import time
import json
import itertools
import threading
import subprocess
import RPi.GPIO as GPIO
from urllib import urlencode
from urllib2 import urlopen

# Only as backup due to unstable wifi-connection
import random

choose_name_button_pin = 37
save_name_button_pin = 36
URL = 'https://qrng.anu.edu.au/API/jsonI.php'

GPIO.setmode(GPIO.BOARD)
GPIO.setup(choose_name_button_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(save_name_button_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

keep_spinning = True


def spin_bar():
    spinner = itertools.cycle(['-', '\\', '|', '/'])
    while keep_spinning:
        sys.stdout.write(next(spinner))
        sys.stdout.flush()
        time.sleep(0.1)
        sys.stdout.write('\b')


def set_seed():
    try:
        current_time = int(time.time())
        sys.stdout.write("\rSetting random seed \n")
        random_seed = get_random_number()
        random.seed(current_time*random_seed)
    except Exception as e:
        sys.stdout.write("\rWifi Error; Using Pseudo-random fallback...  \n")


def get_random_number():
    """Fetch data from the ANU Quantum Random Numbers JSON API"""
    url = URL + '?' + urlencode({
        'type': 'uint16',
        'length': 1,
        'size': 1,
    })
    data = urlopen(url, timeout=5).read()
    data = json.loads(data)
    assert data['success'] is True
    numbers = data['data']
    return numbers.pop()


if __name__ == "__main__":
    # Seet the random module in the beginning of the test
    set_seed()

    subprocess.call(['figlet', '-c', 'Namechooser\n4000'])
    with open('already_won_names.txt') as already_won_names:
        print("\nThis year's current winners:")
        print(already_won_names.read())

    rnm = None
    while (True):
        while (GPIO.input(choose_name_button_pin)):
            if not GPIO.input(save_name_button_pin) and rnm is not None:
                with open('already_won_names.txt', 'a') as already_won_names:
                    already_won_names.write(rnm + '\n')
                print("Name saved!")
                with open('already_won_names.txt', 'r') as already_won_names:
                    print("\nThis year's current winners:")
                    print(already_won_names.read())
                time.sleep(0.5)
                rnm = None
            pass
        og_names = [line.rstrip() for line in open('names.txt')]
        names = og_names * 3  # Three tickets per person

        with open('already_won_names.txt') as already_won_names:
            for name in already_won_names:
                try:
                    names.remove(name.rstrip())
                except ValueError:
                    pass

        keep_spinning = True
        sys.stdout.write("Splitting photon beam... ")

        t = threading.Thread(target=spin_bar)
        t.start()

        random.shuffle(names)
        rnm = random.choice(names)

        sys.stdout.write("\r    Randomizing names...   ")
        time.sleep(0.8)
        for name in og_names:
            sys.stdout.write("\r{:>23}...  ".format(name))
            time.sleep(0.1)

        keep_spinning = False

        print("\r                                    \n")
        subprocess.call(['figlet', '-c', rnm.decode('utf-8').encode('latin-1')])

        print("\n\n")
